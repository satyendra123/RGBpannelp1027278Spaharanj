/*
#define PxMATRIX_SPI_FREQUENCY 10000000
#include <PxMatrix.h>

#include <Fonts/FreeMonoBold9pt7b.h>
#include <Fonts/FreeSansBold9pt7b.h>
#include <Fonts/FreeSerifBold9pt7b.h>

#define P_LAT 5
#define P_A   19
#define P_B   23
#define P_C   18
#define P_OE  4

#define matrix_width  32
#define matrix_height 16

hw_timer_t * timer = NULL;
portMUX_TYPE timerMux = portMUX_INITIALIZER_UNLOCKED;

uint8_t display_draw_time = 30;

PxMATRIX display(matrix_width, matrix_height, P_LAT, P_OE, P_A, P_B, P_C);

uint16_t myRED      = display.color565(255, 0, 0);
uint16_t myGREEN    = display.color565(0, 255, 0);
uint16_t myBLUE     = display.color565(0, 0, 255);
uint16_t myWHITE    = display.color565(255, 255, 255);
uint16_t myYELLOW   = display.color565(255, 255, 0);
uint16_t myCYAN     = display.color565(0, 255, 255);
uint16_t myMAGENTA  = display.color565(255, 0, 255);
uint16_t myVIOLET   = display.color565(127, 0, 255);
uint16_t myBLACK    = display.color565(0, 0, 0);

uint16_t myCOLOR_ARRAY[8] = {myRED, myGREEN, myBLUE, myWHITE, myYELLOW, myCYAN, myMAGENTA, myVIOLET};

void IRAM_ATTR display_updater(){
  portENTER_CRITICAL_ISR(&timerMux);
  display.display(display_draw_time);
  portEXIT_CRITICAL_ISR(&timerMux);
}

void display_update_enable(bool is_enable) {
  if (is_enable){
    timer = timerBegin(0, 80, true);
    timerAttachInterrupt(timer, &display_updater, true);
    timerAlarmWrite(timer, 1500, true);
    timerAlarmEnable(timer);
  }
  else{
    timerDetachInterrupt(timer);
    timerAlarmDisable(timer);
  }
}

void setup() {

  delay(2000);
  Serial.begin(115200);
  Serial.println();
  display.begin(8);
  delay(100);
  display_update_enable(true);
  delay(100);

  display.clearDisplay();
  delay(1000);

  display.setBrightness(125);
  delay(100);

  display.setTextWrap(false);
  display.setRotation(0);
  delay(100);
}

void loop() {

  Serial.println();
  Serial.println("Font : FreeMonoBold9pt7b");
  display.setFont(&FreeMonoBold9pt7b);
  display.setTextColor(myRED);
  display.setCursor(0, 12);
  display.print("A1");
  delay(5000);

  display.clearDisplay();
  delay(1000);

  Serial.println();
  Serial.println("Font : FreeSansBold9pt7b");
  display.setFont(&FreeSansBold9pt7b);
  display.setTextColor(myGREEN);
  display.setCursor(0, 13);
  display.print("A1");
  delay(5000);

  display.clearDisplay();
  delay(1000);

  Serial.println();
  Serial.println("Font : FreeSerifBold9pt7b");
  display.setFont(&FreeSerifBold9pt7b);
  display.setTextColor(myBLUE);
  display.setCursor(0, 12);
  display.print("A1");
  delay(5000);

  display.clearDisplay();
  delay(1000);
}
*/

#define PxMATRIX_SPI_FREQUENCY 10000000
#include <PxMatrix.h>

#define P_LAT 5
#define P_A   19
#define P_B   23
#define P_C   18
#define P_OE  4

#define matrix_width  32
#define matrix_height 16

hw_timer_t * timer = NULL;
portMUX_TYPE timerMux = portMUX_INITIALIZER_UNLOCKED;

uint8_t display_draw_time = 30;
PxMATRIX display(matrix_width, matrix_height, P_LAT, P_OE, P_A, P_B, P_C);

uint16_t myRED      = display.color565(255, 0, 0);
uint16_t myGREEN    = display.color565(0, 255, 0);
uint16_t myBLUE     = display.color565(0, 0, 255);
uint16_t myWHITE    = display.color565(255, 255, 255);
uint16_t myYELLOW   = display.color565(255, 255, 0);
uint16_t myCYAN     = display.color565(0, 255, 255);
uint16_t myMAGENTA  = display.color565(255, 0, 255);
uint16_t myVIOLET   = display.color565(127, 0, 255);
uint16_t myBLACK    = display.color565(0, 0, 0);

uint16_t myCOLOR_ARRAY[8] = {myRED, myGREEN, myBLUE, myWHITE, myYELLOW, myCYAN, myMAGENTA, myVIOLET};

void IRAM_ATTR display_updater(){
  portENTER_CRITICAL_ISR(&timerMux);
  display.display(display_draw_time);
  portEXIT_CRITICAL_ISR(&timerMux);
}

void display_update_enable(bool is_enable) {
  if (is_enable){
    timer = timerBegin(0, 80, true);
    timerAttachInterrupt(timer, &display_updater, true);
    timerAlarmWrite(timer, 1500, true);
    timerAlarmEnable(timer);
  }
  else{
    timerDetachInterrupt(timer);
    timerAlarmDisable(timer);
  }
}

void setup() {
  delay(2000);
  Serial.begin(115200);
  Serial.println();
  display.begin(8);
  delay(100);
  display_update_enable(true);
  delay(100);

  display.clearDisplay();
  delay(1000);

  display.setBrightness(125);
  delay(100);

  display.setTextWrap(false);
  display.setTextSize(2);
  display.setRotation(0);
  delay(100);
  display.clearDisplay();
  delay(1000);
}

void loop() {

  int myCOLOR_ARRAY_Length = sizeof(myCOLOR_ARRAY) / sizeof(myCOLOR_ARRAY[0]);
  for (byte i = 0; i < myCOLOR_ARRAY_Length; i++) {
    display.setTextColor(myCOLOR_ARRAY[i]);
    display.setCursor(0, 0);
    display.print("ABCD");
    delay(2500);
    display.clearDisplay();
    delay(1000);
  }
}
